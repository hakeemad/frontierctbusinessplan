"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@replit+database@3.0.1";
exports.ids = ["vendor-chunks/@replit+database@3.0.1"];
exports.modules = {

/***/ "(rsc)/./node_modules/.pnpm/@replit+database@3.0.1/node_modules/@replit/database/dist/index.mjs":
/*!************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@replit+database@3.0.1/node_modules/@replit/database/dist/index.mjs ***!
  \************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ Client)\n/* harmony export */ });\n/* harmony import */ var fs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! fs */ \"fs\");\n// src/index.ts\n\n\n// src/result.ts\nfunction Err(error, errorExtras) {\n  return { ok: false, error, errorExtras };\n}\nfunction Ok(value) {\n  return { ok: true, value };\n}\n\n// src/index.ts\nvar Client = class {\n  _dbUrl;\n  // use this.dbUrl internally\n  lastDbUrlRefreshTime;\n  /**\n   * Initiates Class.\n   * @param {String} dbUrl Custom database URL\n   */\n  constructor(dbUrl) {\n    if (dbUrl) {\n      this._dbUrl = dbUrl;\n    } else {\n      this._dbUrl = getDbUrl();\n      this.lastDbUrlRefreshTime = Date.now();\n    }\n  }\n  get dbUrl() {\n    if (!this.lastDbUrlRefreshTime) {\n      return this._dbUrl;\n    }\n    if (Date.now() < this.lastDbUrlRefreshTime + 1e3 * 60 * 60) {\n      return this._dbUrl;\n    }\n    this._dbUrl = getDbUrl();\n    this.lastDbUrlRefreshTime = Date.now();\n    return this._dbUrl;\n  }\n  /**\n   * Gets a key\n   * @param {String} key Key\n   * @param {boolean} [options.raw=false] Makes it so that we return the raw string value. Default is false.\n   */\n  async get(key, options) {\n    const response = await doFetch({\n      urlPath: `${this.dbUrl}/${encodeURIComponent(key)}`\n    });\n    if (!response.ok) {\n      return Err(response.error);\n    }\n    const text = await response.value.text();\n    if (options && options.raw) {\n      return Ok(text);\n    }\n    if (!text) {\n      return Ok(null);\n    }\n    try {\n      const parsed = JSON.parse(text);\n      return Ok(parsed === null || parsed === void 0 ? null : parsed);\n    } catch {\n      return Err({\n        message: `Failed to parse value of ${key}, try passing a raw option to get the raw value`\n      });\n    }\n  }\n  /**\n   * Sets a key\n   * @param {String} key Key\n   * @param {any} value Value\n   */\n  async set(key, value) {\n    const strValue = JSON.stringify(value);\n    const response = await doFetch({\n      urlPath: this.dbUrl,\n      method: \"POST\",\n      headers: { \"Content-Type\": \"application/x-www-form-urlencoded\" },\n      body: encodeURIComponent(key) + \"=\" + encodeURIComponent(strValue)\n    });\n    if (response.ok) {\n      return Ok(this);\n    } else {\n      return Err(response.error);\n    }\n  }\n  /**\n   * Deletes a key\n   * @param {String} key Key\n   */\n  async delete(key) {\n    const response = await doFetch({\n      urlPath: `${this.dbUrl}/${encodeURIComponent(key)}`,\n      method: \"DELETE\"\n    });\n    if (response.ok) {\n      return Ok(this);\n    } else {\n      return Err(response.error);\n    }\n  }\n  /**\n   * List key starting with a prefix if provided. Otherwise list all keys.\n   * @param {String} prefix The prefix to filter by.\n   */\n  async list(prefix = \"\") {\n    const response = await doFetch({\n      urlPath: `${this.dbUrl}?encode=true&prefix=${encodeURIComponent(prefix)}`\n    });\n    if (!response.ok) {\n      return Err(response.error);\n    }\n    const text = await response.value.text();\n    if (!text.length) {\n      return Ok([]);\n    }\n    return Ok(text.split(\"\\n\").map(decodeURIComponent));\n  }\n  /**\n   * Clears the database.\n   * @returns a Promise containing this\n   */\n  async empty() {\n    const keys = await this.list();\n    if (!keys.ok) {\n      return Err(keys.error);\n    }\n    const promises = [];\n    for (const key of keys.value) {\n      promises.push(this.delete(key));\n    }\n    const response = await Promise.all(promises);\n    const errors = response.filter((r) => !r.ok).map((r) => r.error);\n    if (errors.length) {\n      return Err({ message: \"Failed to empty databse\" }, errors);\n    }\n    return Ok(this);\n  }\n  /**\n   * Get all key/value pairs and return as an object\n   * @param {boolean} [options.raw=false] Makes it so that we return the raw\n   * string value for each key. Default is false.\n   */\n  async getAll(options) {\n    const keys = await this.list();\n    if (!keys.ok) {\n      return Err(keys.error);\n    }\n    let output = {};\n    for (const key of keys.value) {\n      const value = await this.get(key, options);\n      if (!value.ok) {\n        return Err(value.error);\n      }\n      output[key] = value.value;\n    }\n    return Ok(output);\n  }\n  /**\n   * Sets multiple keys from an object.\n   * @param {Object} obj The object.\n   */\n  async setMultiple(obj) {\n    const promises = [];\n    for (const key in obj) {\n      let val = obj[key];\n      promises.push(this.set(key, val));\n    }\n    const response = await Promise.all(promises);\n    const errors = response.filter((r) => !r.ok).map((r) => r.error);\n    if (errors.length) {\n      return Err({ message: \"Failed to set multiple\" }, errors);\n    }\n    return Ok(this);\n  }\n  /**\n   * Delete multiple entries by key.\n   * @param {Array<string>} args Keys\n   */\n  async deleteMultiple(...args) {\n    const promises = [];\n    for (const arg of args) {\n      promises.push(this.delete(arg));\n    }\n    const response = await Promise.all(promises);\n    const errors = response.filter((r) => !r.ok).map((r) => r.error);\n    if (errors.length) {\n      return Err({ message: \"Failed to delete keys\" }, errors);\n    }\n    return Ok(this);\n  }\n};\nasync function doFetch({\n  urlPath,\n  ...rest\n}) {\n  try {\n    const response = await fetch(new URL(urlPath), rest);\n    if (response.status !== 200 && response.status !== 204) {\n      return Err({\n        message: await response.text(),\n        statusCode: response.status\n      });\n    }\n    return Ok(response);\n  } catch (e) {\n    return Err({ message: e instanceof Error ? e.message : \"unknown error\" });\n  }\n}\nvar replitDBFilename = \"/tmp/replitdb\";\nfunction getDbUrl() {\n  let dbUrl;\n  try {\n    dbUrl = (0,fs__WEBPACK_IMPORTED_MODULE_0__.readFileSync)(replitDBFilename, \"utf8\");\n  } catch (err) {\n    dbUrl = process.env.REPLIT_DB_URL;\n  }\n  if (!dbUrl) {\n    throw new Error(\"expected dbUrl, got undefined\");\n  }\n  return dbUrl;\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/@replit+database@3.0.1/node_modules/@replit/database/dist/index.mjs\n");

/***/ })

};
;